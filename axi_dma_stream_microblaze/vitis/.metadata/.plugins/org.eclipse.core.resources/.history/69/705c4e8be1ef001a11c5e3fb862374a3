/*
    Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
    Copyright (c) 2012 - 2020 Xilinx, Inc. All Rights Reserved.
	SPDX-License-Identifier: MIT


    http://www.FreeRTOS.org
    http://aws.amazon.com/freertos


    1 tab == 4 spaces!
*/

/* FreeRTOS includes. */
#include <boardLEDProtocol.h>
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "axis_dma/axis_dma_freertos.h"


#include "basicProtocol.h"
#include "pingProtocol.h"
#include "boardLEDProtocol.h"
#include "dshotProtocol.h"
#include "pwmCaptureProtocol.h"

#include "pwmDecode.h"

#define TIMER_ID	1
#define DELAY_20_MS	20UL
#define DELAY_1_SECOND		1000UL
#define TIMER_CHECK_THRESHOLD	9
/*-----------------------------------------------------------*/

/* The Tx and Rx tasks as described at the top of this file. */
static void prvTxTask( void *pvParameters );
static void prvRxTask( void *pvParameters );
static void vTimerCallback( TimerHandle_t pxTimer );
/*-----------------------------------------------------------*/

/* The queue used by the Tx and Rx tasks, as described at the top of this
file. */
static TaskHandle_t xTxTask;
static TaskHandle_t xRxTask;
static QueueHandle_t xQueue = NULL;
static TimerHandle_t xTimer = NULL;

static void dhotMotorUpdate(uint8_t motor, uint16_t value);
static void boardLEDUpdate(boardLEDOperation operation, uint16_t led);
static basicProtocol gProtocol(basicProtocol::CRC_ESC_OFFLOAD_TX_DMA);
static pingProtocolServer gPingServer(gProtocol);
static boardLEDProtocolServer ledBoardServer(gProtocol);
static dshotProtocolServer dshotServer(gProtocol);
static pwmCaptureProtocolClient pwmDecodeClient(gProtocol);

static XGpio gPIOBoardLEDs;
static uint16_t gBoardLEDs;

uint8_t *gpTxPkt, *gpTxPktOffset;
size_t gTxPktMaxSize, gTxPktSize;

typedef struct
{
	size_t m_size;
	uint8_t *m_pPkt;
}txPkt_t;



/* function to send out bytes */
static void callConstructors()
{
    // Start and end points of the constructor list,
    // defined by the linker script.
    extern void (*___CTORS_LIST___)();
    extern void (*__CTOR_END__)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &___CTORS_LIST___; p < &__CTOR_END__; ++p) {
        (*p)();
    }
}


uint8_t *DMA_TX_AllocWrapper( size_t len, int &errNo)
{
	errNo = 0;
	uint8_t *pPktTx = nullptr;
	if (allocTx(pPktTx, len))
	{
		return pPktTx;
	}
	else
	{
		return nullptr;
	}
}

bool tx_DMAbasicProtocol(uint8_t *pPkt, size_t len, basicProtocol::PktState_t state)
{
	(void)state;

	return wait_tx_pkt(pPkt, len);
}

bool tx_basicProtocol(uint8_t *pPkt, size_t len, basicProtocol::PktState_t state)
{
	bool rc = false;
	switch(state)
	{
		case basicProtocol::PktState_t::START_OF_PKT:

			gTxPktSize =0;
			if (allocTx(gpTxPkt, gTxPktMaxSize))
			{
				while (gpTxPkt == nullptr)
					xil_printf( "Hello\r\n" );


				gpTxPktOffset = gpTxPkt;
				for(;len; len--, gTxPktMaxSize--)
				{
					*gpTxPktOffset++ = *pPkt++;
					gTxPktSize++;
				}
				rc = true;
			}
			else
			{
				gpTxPkt = nullptr;
			}

		break;
		case basicProtocol::PktState_t::END_OF_PKT:
			if ( gpTxPkt != nullptr)
			{
				for(;len; len--, gTxPktMaxSize--)
				{
					*gpTxPktOffset++ = *pPkt++;
					gTxPktSize++;
				}
				//Queue packet to task, if not free
				txPkt_t txPktInfo;
				txPktInfo.m_pPkt = gpTxPkt;
				txPktInfo.m_size = gTxPktSize;
		        if( xQueueSendToBack( xQueue, ( void * ) &txPktInfo, ( TickType_t ) 10 ) != pdPASS )
		        {
		        	freeRxPkt(gpTxPkt);
		        	rc = false;
		        }
		        else
		        {
		        	rc = true;
		        }
			}
		break;

		default:
			if ( gpTxPkt != nullptr)
			{
				for(;len; len--, gTxPktMaxSize--)
				{
					*gpTxPktOffset++ = *pPkt++;
					gTxPktSize++;
				}
				rc = true;
			}
		break;
	}
	return rc;
}

/* Set up a callback from the protocol handler to TX bytes */
bool connectFastSerialTx()
{
	basicProtocol::txPacket_t del;
	del.set(/*tx_basicProtocol*/tx_DMAbasicProtocol);
	gProtocol.registerTx(del);

	basicProtocol::allocTXPacket_t alloc_del;
	alloc_del.set(DMA_TX_AllocWrapper);
	gProtocol.attachDMAAllocate(alloc_del);

	boardLEDProtocolServer::postLEDUpdateCallback_t delLEDCallback;
	delLEDCallback.set(boardLEDUpdate);
	ledBoardServer.attach(delLEDCallback);

	dshotProtocolServer::dshotMotorUpdate_t delDSHOTCallback;
	delDSHOTCallback.set(dhotMotorUpdate);
	dshotServer.attach(delDSHOTCallback);
	return true;
}



int main( void )
{

	callConstructors();

	if (false == setupDMA())
	{
		xil_printf( "Error\r\n" );
	}

	connectFastSerialTx();

	int rc =  XGpio_Initialize(&gPIOBoardLEDs,0);
	if (rc != 0)
	{
		xil_printf( "Error\r\n" );
	}
	XGpio_SetDataDirection(&gPIOBoardLEDs, 1, 0);
	boardLEDUpdate(boardLEDOperation::WRITE_, 0x0);
	//boardLEDUpdate(boardLEDOperation::TOGGLE_, 0xF);

	xTaskCreate( 	prvTxTask, 					/* The function that implements the task. */
					( const char * ) "Tx", 		/* Text name for the task, provided to assist debugging only. */
					1024, 	/* The stack allocated to the task. */
					NULL, 						/* The task parameter is not used, so set to NULL. */
					tskIDLE_PRIORITY,			/* The task runs at the idle priority. */
					&xTxTask );

	if ( pdPASS != xTaskCreate( prvRxTask,
				 ( const char * ) "GB",
				 1024,
				 NULL,
				 tskIDLE_PRIORITY + 1,
				 &xRxTask ))
	{
		xil_printf( "Error\r\n" );

	}

	xQueue = xQueueCreate(4,sizeof( txPkt_t ) );

	/* Check the queue was created. */
	configASSERT( xQueue );

	xTimer = xTimerCreate( (const char *) "Timer",
							DELAY_20_MS,
							pdTRUE,
							(void *) TIMER_ID,
							vTimerCallback);
	/* Check the timer was created. */
	configASSERT( xTimer );

	/* start the timer with a block time of 0 ticks. This means as soon
	   as the schedule starts the timer will start running and will expire after
	   10 seconds */
	xTimerStart( xTimer, 0 );

	/* Start the tasks and timer running. */
	vTaskStartScheduler();

	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
}


/*-----------------------------------------------------------*/
static void prvTxTask( void *pvParameters )
{
	(void)pvParameters;

	for( ;; )
	{
		/* Delay for 1 second. */
		txPkt_t txPktInfo;
	     if( xQueueReceive( xQueue, &( txPktInfo ),  ( TickType_t ) portMAX_DELAY ) == pdPASS )
	     {
	 		wait_tx_pkt(txPktInfo.m_pPkt, txPktInfo.m_size );
	     }
	}
}
static size_t rx_state;
/*-----------------------------------------------------------*/
static void prvRxTask( [[maybe_unused]]  void *pvParameters )
{
	for( ;; )
	{
		uint8_t *rxPkt;
		size_t lenOfPkt;
		rx_state = __LINE__;
		if ( true == wait_rx_pkt( rxPkt, lenOfPkt,portMAX_DELAY ))
		{
			rx_state = __LINE__;
			gProtocol.onRecv(rxPkt, lenOfPkt);
			rx_state = __LINE__;
			freeRxPkt(rxPkt);
			rx_state = __LINE__;
		}
	}
}

/*-----------------------------------------------------------*/
static void vTimerCallback( TimerHandle_t pxTimer )
{
	long lTimerId;
	configASSERT( pxTimer );

	lTimerId = ( long ) pvTimerGetTimerID( pxTimer );


	if (lTimerId != TIMER_ID)
	{
		xil_printf("FreeRTOS Hello World Example FAILED");
	}

	uint32_t status, pwm1, pwm2, pwm3, pwm4, pwm5, pwm6;
	readStatusAndValues(status, pwm1, pwm2, pwm3, pwm4, pwm5, pwm6);
	pwmDecodeClient.send((uint16_t)pwm1, (uint16_t)pwm2, (uint16_t)pwm3, (uint16_t)pwm4, (uint16_t)pwm5, (uint16_t)pwm6);
}


void dhotMotorUpdate(uint8_t motor, uint16_t value)
{

}


void boardLEDUpdate(boardLEDOperation operation, uint16_t led)
{
	switch(operation)
	{
	case boardLEDOperation::WRITE_:
		/* bottom for LEDs are high is on*/     /* upper 3 are inverse */
		gBoardLEDs = (~led & 0x70) | (led & 0xF);
		break;

	case boardLEDOperation::CLEAR_:
                     /* bottom for LEDs are high is on*/     /* upper 3 are inverse */
		gBoardLEDs = (gBoardLEDs & ~(led & 0xF))  | ( (led & 0x70) | (gBoardLEDs & 0x70) ) ;
		break;

	case boardLEDOperation::SET_:
		/* bottom for LEDs are high is on*/     /* upper 3 are inverse */
		gBoardLEDs = gBoardLEDs | (~led & 0x70) | (led & 0xF);
		break;

	case boardLEDOperation::TOGGLE_:
		/* just inverse the bits normal xor */
		gBoardLEDs = gBoardLEDs ^ led;
		break;

	}

	XGpio_DiscreteWrite(&gPIOBoardLEDs, 1, gBoardLEDs);
}

//eof


