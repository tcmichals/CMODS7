

#include <cstdint>
#include "xaxidma.h"
#include "xparameters.h"
#include "xil_exception.h"

#ifdef __aarch64__
#include "xil_mmu.h"
#endif

#include "FreeRTOS.h"
#include "queue.h"
#include "semphr.h"
#include "task.h"
#include "ringBuffer.h"
#define LOCAL_DEF
#include "axis_dma_freertos.h"

/*  This code uses the example xaxidma_example_sg_intr.c and
 * xaxiemacif_dma.c from Vitis */

static 	XAxiDma_Config *gDMAConfig;
static XAxiDma gAXIDma;
static volatile int TxDone;
static volatile int RxDone;
static volatile int Error;

static void TxCallBack(XAxiDma_BdRing * TxRingPtr);
static void TxIntrHandler(void *Callback);
static void RxCallBack(XAxiDma_BdRing * RxRingPtr);
static void RxIntrHandler(void *Callback);
static bool RxSetup(XAxiDma * AxiDmaInstPtr);
static bool TxSetup(XAxiDma * AxiDmaInstPtr);


#define NUM_RX_BDS				MAX_RX_OS_PKTS
#define RX_OS_QUEUE_SIZE		(NUM_RX_BDS -1)
#define NUM_RX_PACKETS 			(((NUM_RX_BDS) * 2))
#define NUM_TX_PACKETS 			4
#define RX_PKT_SIZE 			1024
#define COALESCING_COUNT		1
#define MAX_PKT_LEN 			RX_PKT_SIZE
#define TX_PKT_SIZE				RX_PKT_SIZE
#define RESET_TIMEOUT_COUNTER	10000


__attribute__((section(".axi_bram_ctrl_0_Mem0"))) uint8_t grxPktArray[NUM_RX_PACKETS][RX_PKT_SIZE] __attribute__ ((aligned (64)));
__attribute__((section(".axi_bram_ctrl_0_Mem0"))) uint8_t gtxPktArray[NUM_TX_PACKETS][TX_PKT_SIZE] __attribute__ ((aligned (64)));

__attribute__((section(".axi_bram_ctrl_0_Mem0"))) uint32_t rxBD[16 * NUM_RX_BDS] __attribute__ ((aligned (64)));
__attribute__((section(".axi_bram_ctrl_0_Mem0"))) uint32_t txBD[16 * 1] __attribute__ ((aligned (64)));

#define COALESCING_COUNT		1
#define DELAY_TIMER_COUNT		100

static ringBuffer<UINTPTR, NUM_RX_PACKETS> gRxPktRBuffer;
static ringBuffer<UINTPTR, NUM_TX_PACKETS> gTxPktRBuffer;

typedef struct {
	UINTPTR m_rxPktBuffer;
	size_t 	m_rxLength;
}rxPkt_t;

static QueueHandle_t gRxPktQueue;
SemaphoreHandle_t    gTxWaitSema;



/*****************************************************************************/
/*
*
* This is the DMA TX callback function to be called by TX interrupt handler.
* This function handles BDs finished by hardware.
*
* @param	TxRingPtr is a pointer to TX channel of the DMA engine.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void TxCallBack(XAxiDma_BdRing * TxRingPtr)
{
	int BdCount;
	u32 BdSts;
	XAxiDma_Bd *BdPtr;
	XAxiDma_Bd *BdCurPtr;
	int Status;
	int Index;

	/* Get all processed BDs from hardware */
	BdCount = XAxiDma_BdRingFromHw(TxRingPtr, XAXIDMA_ALL_BDS, &BdPtr);

	/* Handle the BDs */
	BdCurPtr = BdPtr;
	for (Index = 0; Index < BdCount; Index++)
	{
		/*
		 * Check the status in each BD
		 * If error happens, the DMA engine will be halted after this
		 * BD processing stops.
		 */
		BdSts = XAxiDma_BdGetSts(BdCurPtr);
		if ((BdSts & XAXIDMA_BD_STS_ALL_ERR_MASK) || (!(BdSts & XAXIDMA_BD_STS_COMPLETE_MASK)))
		{
			Error = 1;
			break;
		}

		/*
		 * Here we don't need to do anything. But if a RTOS is being
		 * used, we may need to free the packet buffer attached to
		 * the processed BD
		 */

		UINTPTR BufferAddr = XAxiDma_BdGetBufAddr(BdCurPtr);
		gTxPktRBuffer.push(BufferAddr);

		/* Find the next processed BD */
		BdCurPtr = (XAxiDma_Bd *)XAxiDma_BdRingNext(TxRingPtr, BdCurPtr);

	}

	/* Free all processed BDs for future transmission */
	Status = XAxiDma_BdRingFree(TxRingPtr, BdCount, BdPtr);
	if (Status != XST_SUCCESS)
	{
		Error = 1;
	}

	if(!Error && BdCount)
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		xSemaphoreGiveFromISR( gTxWaitSema, &xHigherPriorityTaskWoken );
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );

		TxDone += BdCount;
	}
}

/*****************************************************************************/
/*
*
* This is the DMA TX Interrupt handler function.
*
* It gets the interrupt status from the hardware, acknowledges it, and if any
* error happens, it resets the hardware. Otherwise, if a completion interrupt
* presents, then it calls the callback function.
*
* @param	Callback is a pointer to TX channel of the DMA engine.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void TxIntrHandler(void *Callback)
{
	XAxiDma_BdRing *TxRingPtr = (XAxiDma_BdRing *) Callback;
	u32 IrqStatus;
	int TimeOut;

	/* Read pending interrupts */
	IrqStatus = XAxiDma_BdRingGetIrq(TxRingPtr);

	/* Acknowledge pending interrupts */
	XAxiDma_BdRingAckIrq(TxRingPtr, IrqStatus);

	/* If no interrupt is asserted, we do not do anything
	 */
	if (!(IrqStatus & XAXIDMA_IRQ_ALL_MASK))
	{
		return;
	}

	/*
	 * If error interrupt is asserted, raise error flag, reset the
	 * hardware to recover from the error, and return with no further
	 * processing.
	 */
	if ((IrqStatus & XAXIDMA_IRQ_ERROR_MASK))
	{
		XAxiDma_BdRingDumpRegs(TxRingPtr);
		Error = 1;

		/*
		 * Reset should never fail for transmit channel
		 */
		XAxiDma_Reset(&gAXIDma);

		TimeOut = RESET_TIMEOUT_COUNTER;

		while (TimeOut)
		{
			if (XAxiDma_ResetIsDone(&gAXIDma))
			{
				break;
			}
			TimeOut -= 1;
		}

		return;
	}

	/*
	 * If Transmit done interrupt is asserted, call TX call back function
	 * to handle the processed BDs and raise the according flag
	 */
	if ((IrqStatus & (XAXIDMA_IRQ_DELAY_MASK | XAXIDMA_IRQ_IOC_MASK)))
	{
		TxCallBack(TxRingPtr);
	}
}

/*****************************************************************************/
/*
*
* This is the DMA RX callback function called by the RX interrupt handler.
* This function handles finished BDs by hardware, attaches new buffers to those
* BDs, and give them back to hardware to receive more incoming packets
*
* @param	RxRingPtr is a pointer to RX channel of the DMA engine.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void RxCallBack(XAxiDma_BdRing * RxRingPtr)
{
	int BdCount;
	XAxiDma_Bd *BdPtr;
	XAxiDma_Bd *BdCurPtr;
	u32 BdSts;
	int Index;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Get finished BDs from hardware */
	BdCount = XAxiDma_BdRingFromHw(RxRingPtr, XAXIDMA_ALL_BDS, &BdPtr);

	BdCurPtr = BdPtr;
	for (Index = 0; Index < BdCount; Index++)
	{
		/*
		 * Check the flags set by the hardware for status
		 * If error happens, processing stops, because the DMA engine
		 * is halted after this BD.
		 */
		BdSts = XAxiDma_BdGetSts(BdCurPtr);
		if ((BdSts & XAXIDMA_BD_STS_ALL_ERR_MASK) || (!(BdSts & XAXIDMA_BD_STS_COMPLETE_MASK)))
		{
			Error = 1;
			break;
		}

		rxPkt_t rxPkt;
		rxPkt.m_rxPktBuffer = XAxiDma_BdGetBufAddr(BdCurPtr);
		rxPkt.m_rxLength = XAxiDma_BdGetActualLength(BdCurPtr, 0xFFFF);
		if (pdTRUE != xQueueSendFromISR(gRxPktQueue, &rxPkt, &xHigherPriorityTaskWoken))
		{
			gRxPktRBuffer.push(rxPkt.m_rxPktBuffer);
		}
		Xil_DCacheInvalidateRange((UINTPTR)rxPkt.m_rxPktBuffer, rxPkt.m_rxLength );
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

		notifyAppTask();

		/* Find the next processed BD */
		BdCurPtr = (XAxiDma_Bd *)XAxiDma_BdRingNext(RxRingPtr, BdCurPtr);

		RxDone += 1;
	}
	XAxiDma_BdRingFree(RxRingPtr, BdCount, BdPtr);
	BdCount = XAxiDma_BdRingGetFreeCnt(RxRingPtr);
	while (BdCount > 0)
	{
		BdCount--;
		UINTPTR RxBufferPtr;
		if ( false == gRxPktRBuffer.pop(RxBufferPtr))
		{
			break;
		}

		XStatus status = XAxiDma_BdRingAlloc(RxRingPtr, 1, &BdCurPtr);
		if (status != XST_SUCCESS)
		{
			gRxPktRBuffer.push(RxBufferPtr);
			return;
		}


		XAxiDma_BdSetBufAddr(BdCurPtr, RxBufferPtr);
			/* Clear everything but the COMPLETE bit, which is cleared when
			 * committed to hardware.
			 */
		u32 bdsts = XAxiDma_BdGetSts(BdCurPtr);
		bdsts &=  XAXIDMA_BD_STS_COMPLETE_MASK;
		XAxiDma_BdWrite(BdCurPtr, XAXIDMA_BD_STS_OFFSET, bdsts);
		XAxiDma_BdSetLength(BdCurPtr, MAX_PKT_LEN,	RxRingPtr->MaxTransferLen);
		XAxiDma_BdSetCtrl(BdCurPtr, 0);
		XAxiDma_BdSetId(BdCurPtr, RxBufferPtr);
#if !defined (__MICROBLAZE__)
		dsb();
#endif

#if defined(__aarch64__)
		XCACHE_INVALIDATE_DCACHE_RANGE((UINTPTR)p->payload, (UINTPTR)XAE_MAX_FRAME_SIZE);
#else
		//Xil_DCacheFlushRange(p, sizeof *p);
		Xil_DCacheFlushRange((INTPTR)BdCurPtr, sizeof( *BdCurPtr));
#endif
		status = XAxiDma_BdRingToHw(RxRingPtr, 1, BdCurPtr);
		if (status != XST_SUCCESS)
		{
			XAxiDma_BdRingUnAlloc(RxRingPtr, 1, BdCurPtr);
			gRxPktRBuffer.push(RxBufferPtr);
			break;
		}
	}
}

/*****************************************************************************/
/*
*
* This is the DMA RX interrupt handler function
*
* It gets the interrupt status from the hardware, acknowledges it, and if any
* error happens, it resets the hardware. Otherwise, if a completion interrupt
* presents, then it calls the callback function.
*
* @param	Callback is a pointer to RX channel of the DMA engine.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void RxIntrHandler(void *Callback)
{
	XAxiDma_BdRing *RxRingPtr = (XAxiDma_BdRing *) Callback;
	u32 IrqStatus;
	int TimeOut;

	/* Read pending interrupts */
	IrqStatus = XAxiDma_BdRingGetIrq(RxRingPtr);

	/* Acknowledge pending interrupts */
	XAxiDma_BdRingAckIrq(RxRingPtr, IrqStatus);

	/*
	 * If no interrupt is asserted, we do not do anything
	 */
	if (!(IrqStatus & XAXIDMA_IRQ_ALL_MASK))
	{
		return;
	}

	/*
	 * If error interrupt is asserted, raise error flag, reset the
	 * hardware to recover from the error, and return with no further
	 * processing.
	 */
	if ((IrqStatus & XAXIDMA_IRQ_ERROR_MASK))
	{
		XAxiDma_BdRingDumpRegs(RxRingPtr);
		Error = 1;

		/* Reset could fail and hang
		 * NEED a way to handle this or do not call it??
		 */
		XAxiDma_Reset(&gAXIDma);

		TimeOut = RESET_TIMEOUT_COUNTER;

		while (TimeOut)
		{
			if(XAxiDma_ResetIsDone(&gAXIDma))
			{
				break;
			}

			TimeOut -= 1;
		}

		return;
	}

	/*
	 * If completion interrupt is asserted, call RX call back function
	 * to handle the processed BDs and then raise the according flag.
	 */
	if ((IrqStatus & (XAXIDMA_IRQ_DELAY_MASK | XAXIDMA_IRQ_IOC_MASK)))
	{
		RxCallBack(RxRingPtr);
	}
}
/*****************************************************************************/
/*
*
* This function sets up RX channel of the DMA engine to be ready for packet
* reception
*
* @param	AxiDmaInstPtr is the pointer to the instance of the DMA engine.
*
* @return	- XST_SUCCESS if the setup is successful.
*		- XST_FAILURE if fails.
*
* @note		None.
*
******************************************************************************/
bool RxSetup(XAxiDma * AxiDmaInstPtr)
{
	XAxiDma_BdRing *RxRingPtr;
	int Status;
	XAxiDma_Bd BdTemplate;
	XAxiDma_Bd *BdPtr;
	XAxiDma_Bd *BdCurPtr;
	int BdCount;
	int FreeBdCount;
	UINTPTR RxBufferPtr;
	int Index;

	RxRingPtr = XAxiDma_GetRxRing(&gAXIDma);

	/* Disable all RX interrupts before RxBD space setup */
	XAxiDma_BdRingIntDisable(RxRingPtr, XAXIDMA_IRQ_ALL_MASK);

	/* Setup Rx BD space */
	BdCount = XAxiDma_BdRingCntCalc(XAXIDMA_BD_MINIMUM_ALIGNMENT,sizeof(rxBD));

	Status = XAxiDma_BdRingCreate(RxRingPtr, (UINTPTR)rxBD, (UINTPTR)rxBD,XAXIDMA_BD_MINIMUM_ALIGNMENT, BdCount);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	/*
	 * Setup a BD template for the Rx channel. Then copy it to every RX BD.
	 */
	XAxiDma_BdClear(&BdTemplate);
	Status = XAxiDma_BdRingClone(RxRingPtr, &BdTemplate);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	/* Attach buffers to RxBD ring so we are ready to receive packets */
	FreeBdCount = XAxiDma_BdRingGetFreeCnt(RxRingPtr);

	Status = XAxiDma_BdRingAlloc(RxRingPtr, FreeBdCount, &BdPtr);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	BdCurPtr = BdPtr;

	for (Index = 0; Index < FreeBdCount; Index++)
	{
		if (false == gRxPktRBuffer.pop(RxBufferPtr))
		{
			return false;
		}
		Xil_DCacheInvalidateRange(RxBufferPtr, MAX_PKT_LEN);
		Status = XAxiDma_BdSetBufAddr(BdCurPtr, RxBufferPtr);
		if (Status != XST_SUCCESS)
		{
			return false;
		}

		Status = XAxiDma_BdSetLength(BdCurPtr, MAX_PKT_LEN,	RxRingPtr->MaxTransferLen);
		if (Status != XST_SUCCESS)
		{
			return false;
		}

		/* Receive BDs do not need to set anything for the control
		 * The hardware willUINTPTR set the SOF/EOF bits per stream status
		 */
		XAxiDma_BdSetCtrl(BdCurPtr, 0);

		XAxiDma_BdSetId(BdCurPtr, RxBufferPtr);

		//RxBufferPtr += MAX_PKT_LEN;


		BdCurPtr = (XAxiDma_Bd *)XAxiDma_BdRingNext(RxRingPtr, BdCurPtr);
	}

	/*
	 * Set the coalescing threshold, so only one receive interrupt
	 * occurs for this example
	 *
	 * If you would like to have multiple interrupts to happen, change
	 * the COALESCING_COUNT to be a smaller value
	 */
	Status = XAxiDma_BdRingSetCoalesce(RxRingPtr, COALESCING_COUNT,	DELAY_TIMER_COUNT);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	Status = XAxiDma_BdRingToHw(RxRingPtr, FreeBdCount, BdPtr);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	/* Enable all RX interrupts */
	XAxiDma_BdRingIntEnable(RxRingPtr, XAXIDMA_IRQ_ALL_MASK);

	/* Start RX DMA channel */
	Status = XAxiDma_BdRingStart(RxRingPtr);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	return true;
}


/*****************************************************************************/
/*
*
* This function sets up the TX channel of a DMA engine to be ready for packet
* transmission.
*
* @param	AxiDmaInstPtr is the pointer to the instance of the DMA engine.
*
* @return	- XST_SUCCESS if the setup is successful.
*		- XST_FAILURE otherwise.
*
* @note		None.
*
******************************************************************************/
bool TxSetup(XAxiDma * AxiDmaInstPtr)
{
	XAxiDma_BdRing *TxRingPtr = XAxiDma_GetTxRing(&gAXIDma);
	XAxiDma_Bd BdTemplate;
	int Status;
	u32 BdCount;

	/* Disable all TX interrupts before TxBD space setup */
	XAxiDma_BdRingIntDisable(TxRingPtr, XAXIDMA_IRQ_ALL_MASK);

	/* Setup TxBD space  */
	BdCount = XAxiDma_BdRingCntCalc(XAXIDMA_BD_MINIMUM_ALIGNMENT,(UINTPTR)sizeof(txBD));

	Status = XAxiDma_BdRingCreate(TxRingPtr, (UINTPTR)txBD, (UINTPTR)txBD, XAXIDMA_BD_MINIMUM_ALIGNMENT, BdCount);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	/*
	 * Like the RxBD space, we create a template and set all BDs to be the
	 * same as the template. The sender has to set up the BDs as needed.
	 */
	XAxiDma_BdClear(&BdTemplate);
	Status = XAxiDma_BdRingClone(TxRingPtr, &BdTemplate);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	/*
	 * Set the coalescing threshold, so only one transmit interrupt
	 * occurs for this example
	 *
	 * If you would like to have multiple interrupts to happen, change
	 * the COALESCING_COUNT to be a smaller value
	 */
	Status = XAxiDma_BdRingSetCoalesce(TxRingPtr, COALESCING_COUNT,	DELAY_TIMER_COUNT);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	/* Enable all TX interrupts */
	XAxiDma_BdRingIntEnable(TxRingPtr, XAXIDMA_IRQ_ALL_MASK);

	/* Start the TX channel */
	Status = XAxiDma_BdRingStart(TxRingPtr);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	return true;
}



/*****************************************************************************/
/*
*
* This function sets up the TX channel of a DMA engine to be ready for packet
* transmission.
*
* @param	void
*
* @return- true if DMA is setup
*		- false otherwise.
*
* @note		None.
*
******************************************************************************/
bool setupDMA()
{

#ifdef __aarch64__
	Xil_SetTlbAttributes(txBD, MARK_UNCACHEABLE);
	Xil_SetTlbAttributes(rxBD, MARK_UNCACHEABLE);
#endif

	for(size_t index=0; index < NUM_RX_PACKETS;++index)
		gRxPktRBuffer.push( reinterpret_cast<UINTPTR>(&grxPktArray[index][0]));

	for(size_t index=0; index < NUM_TX_PACKETS;++index)
		gTxPktRBuffer.push( reinterpret_cast<UINTPTR>(&gtxPktArray[index][0]));

	gRxPktQueue = xQueueCreate(MAX_RX_OS_PKTS, sizeof(rxPkt_t));
    if( gRxPktQueue == nullptr )
    {
    	return false;
    }

	gTxWaitSema =  xSemaphoreCreateBinary();
	xSemaphoreGive(gTxWaitSema);

	gDMAConfig = XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);
	if (!gDMAConfig)
	{
		return false;
	}


	gDMAConfig = XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);
	if (!gDMAConfig)
	{
		return false;
	}

	XAxiDma_CfgInitialize(&gAXIDma, gDMAConfig);
	if(!XAxiDma_HasSg(&gAXIDma))
	{
		return false;
	}


	/* Set up TX/RX channels to be ready to transmit and receive packets */
	int Status = TxSetup(&gAXIDma);
	if (false == Status )
	{
		return false;
	}

	Status = RxSetup(&gAXIDma);
	if (false ==Status)
	{
		return false;
	}

	XAxiDma_BdRing *TxRingPtr = XAxiDma_GetTxRing(&gAXIDma);
	XAxiDma_BdRing *RxRingPtr = XAxiDma_GetRxRing(&gAXIDma);

	//XPAR_INTC_0_AXIDMA_0_MM2S_INTROUT_VEC_ID
	//XPAR_INTC_0_AXIDMA_0_S2MM_INTROUT_VEC_ID

	portBASE_TYPE xStatus = xPortInstallInterruptHandler( XPAR_INTC_0_AXIDMA_0_MM2S_INTROUT_VEC_ID, TxIntrHandler, TxRingPtr );
	if ( pdPASS != xStatus)
	{
		return false;
	}
	xStatus = xPortInstallInterruptHandler( XPAR_INTC_0_AXIDMA_0_S2MM_INTROUT_VEC_ID, RxIntrHandler, RxRingPtr );
	if ( pdPASS != xStatus)
	{
		return false;
	}

	vPortEnableInterrupt(XPAR_INTC_0_AXIDMA_0_MM2S_INTROUT_VEC_ID);
	vPortEnableInterrupt(XPAR_INTC_0_AXIDMA_0_S2MM_INTROUT_VEC_ID);

	return true;
}


/*****************************************************************************/
/*
*
* wait for RX packet from DMA
*
*
* @param	void
*
* @return- true if a packet is ready
*		- false otherwise.
*
* @note		None.
*
******************************************************************************/
bool wait_rx_pkt( uint8_t * &pRxPkt, size_t &lenOfPkt,TickType_t xTicksToWait )
{
	//init return values
	pRxPkt = nullptr;
	lenOfPkt = 0;

	rxPkt_t rxPkt;
	bool rc;

	BaseType_t rcQueue = xQueueReceive(gRxPktQueue, &rxPkt, xTicksToWait);
	if (pdTRUE ==rcQueue)
	{
		pRxPkt = reinterpret_cast<uint8_t*>(rxPkt.m_rxPktBuffer);
		lenOfPkt = rxPkt.m_rxLength;
		rc = true;
	}
	else
	{
		rc= false;
	}

	return rc;
}

/*****************************************************************************/
/*
*
* free an Rx packet back to the queue
*
*
* @param	uint8_t * to a pkt
*
* @return- true if a packet is ready
*		- false otherwise.
*
* @note		None.
*
******************************************************************************/
bool freeRxPkt(uint8_t *rxPkt)
{
	bool isFound = false;
	for(size_t index=0; index < NUM_RX_PACKETS;++index)
		if (rxPkt == &grxPktArray[index][0])
		{
			isFound = true;
			break;
		}

	if (false == isFound)
	{
		return false;
	}

	vPortDisableInterrupt(XPAR_INTC_0_AXIDMA_0_S2MM_INTROUT_VEC_ID);

	bool rc = gRxPktRBuffer.push(reinterpret_cast<UINTPTR>(rxPkt));

	vPortEnableInterrupt(XPAR_INTC_0_AXIDMA_0_S2MM_INTROUT_VEC_ID);
	return rc;

}

/*****************************************************************************/
/*
*
* This function non-blockingly transmits all packets through the DMA engine.
*
* @param	AxiDmaInstPtr points to the DMA engine instance
*
* @return
* 		- XST_SUCCESS if the DMA accepts all the packets successfully,
* 		- XST_FAILURE if error occurs
*
* @note		None.
*
******************************************************************************/
bool allocTx(uint8_t *&txPkt, size_t &lenOfTxPkt)
{

	vPortDisableInterrupt(XPAR_INTC_0_AXIDMA_0_MM2S_INTROUT_VEC_ID);
	UINTPTR pBuffer=0;
	bool rc = gTxPktRBuffer.pop(pBuffer);
	txPkt = (uint8_t *)pBuffer;

	vPortEnableInterrupt(XPAR_INTC_0_AXIDMA_0_MM2S_INTROUT_VEC_ID);
	lenOfTxPkt = TX_PKT_SIZE;

	return rc;
}


/*****************************************************************************/
/*
*
*
*
* @param
*
* @return
* 		- true if sent
* 		- false of allocation
*
* @note		None.
*
******************************************************************************/
size_t txCall ;
bool wait_tx_pkt( uint8_t *txPkt, size_t lenOfPkt)
{
	XAxiDma_BdRing *TxRingPtr = XAxiDma_GetTxRing(&gAXIDma);
	XAxiDma_Bd *BdPtr, *BdCurPtr;
	UINTPTR BufferAddr;

	if (TX_PKT_SIZE  <	lenOfPkt || txPkt == nullptr)
	{
		return false;
	}

	if( pdPASS != xSemaphoreTake( gTxWaitSema, ( TickType_t ) portMAX_DELAY ) )
	{
		return false;
	}
	/* Flush the buffers before the DMA transfer, in case the Data Cache
	 * is enabled
	 */
	Xil_DCacheFlushRange((UINTPTR)txPkt, lenOfPkt);

	int Status = XAxiDma_BdRingAlloc(TxRingPtr, 1, &BdPtr);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	BufferAddr = (UINTPTR)txPkt;
	BdCurPtr = BdPtr;

	Status = XAxiDma_BdSetBufAddr(BdCurPtr, BufferAddr);
	if (Status != XST_SUCCESS || BufferAddr ==0)
	{
		return false;
	}

	Status = XAxiDma_BdSetLength(BdCurPtr, lenOfPkt, TxRingPtr->MaxTransferLen);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	XAxiDma_BdSetCtrl(BdCurPtr, 0);
	XAxiDma_BdSetId(BdCurPtr, BufferAddr);

	XAxiDma_BdSetCtrl(BdPtr, XAXIDMA_BD_CTRL_TXSOF_MASK | XAXIDMA_BD_CTRL_TXEOF_MASK);
	/* Give the BD to hardware */
	Status = XAxiDma_BdRingToHw(TxRingPtr,1, BdPtr);
	if (Status != XST_SUCCESS)
	{
		return false;
	}

	txCall++;
	return true;
}
//eof

